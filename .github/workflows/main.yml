name: Test Automation
on: 
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build Frontend
        run: |
          cd frontend
          go build .
      - name: Build Backend
        run: |
          cd backend
          go build .
      - name: Upload repo
        uses: actions/upload-artifact@v4
        with: 
          name: code
          path: .
          include-hidden-files: true

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Test Frontend
        run: |
          cd frontend
          go test ./...

  docker-image:
    runs-on: ubuntu-latest
    needs: [build, test]
    permissions:
      packages: write
    steps:
    - name: Download code
      uses: actions/download-artifact@v4
      with:
        name: code
        path: .

    - name: Log in 
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    
    - name: Build frontend image
      run: |
        FRONTEND_IMAGE=ghcr.io/bruunnnn/simple-fortune-cookie/frontend:latest
        docker build -t $FRONTEND_IMAGE ./frontend
        docker push $FRONTEND_IMAGE
        echo "FRONTEND_IMAGE=$FRONTEND_IMAGE" >> $GITHUB_ENV

    
    - name: Build backend image
      run: |
        BACKEND_IMAGE=ghcr.io/bruunnnn/simple-fortune-cookie/backend:latest
        docker build -t $BACKEND_IMAGE ./backend
        docker push $BACKEND_IMAGE
        echo "BACKEND_IMAGE=$BACKEND_IMAGE" >> $GITHUB_ENV

        docker run -d -p 8080:8080 $FRONTEND_IMAGE
        docker run -d -p 9000:9000 $BACKEND_IMAGE
        
  KUBECONFIG:
    runs-on: ubuntu-latest
    needs: docker-image
    steps:
    - name: Set up kubeconfig
      run: echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig

    

